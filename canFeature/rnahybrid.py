# -*- coding: utf-8 -*-
import subprocess
import os
from tempfile import NamedTemporaryFile
'''
RNAHybrid win 32 参数：
Usage: RNAhybrid [options] [target sequence] [query sequence].
options:
  -b <number of hits per target>
  -c compact output
  -d <xi>,<theta>
  -f helix constraint
  -h help
  -m <max targetlength>
  -n <max query length>
  -u <max internal loop size (per side)>
  -v <max bulge loop size>
  -e <energy cut-off>
  -p <p-value cut-off>
  -s (3utr_fly|3utr_worm|3utr_human)
  -g (ps|png|jpg|all)
  -t <target file>
  -q <query file>

Either a target file has to be given (FASTA format)
or one target sequence directly.

Either a query file has to be given (FASTA format)
or one query sequence directly.

The helix constraint format is "from,to", eg. -f 2,7 forces
structures to have a helix from position 2 to 7 with respect to the query.

<xi> and <theta> are the position and shape parameters, respectively,
of the extreme value distribution assumed for p-value calculation.
If omitted, they are estimated from the maximal duplex energy of the query.
In that case, a data set name has to be given with the -s flag.
'''

def contains(loc, other_loc):
    ''' Returns True if @loc is contained within @other_loc '''
    if loc[0] >= other_loc[0] and loc[1] <= other_loc[1]:
        return True
    return False

def get_match_len_and_type(mrna_mismatch, mrna_match,
                           mirna_mismatch, mirna_match):
    # Returns the length of mrna that is actually aligned (excluding gaps)
    # Returns the start and end position of mirna match from the 5' end until
    # nucleotide position 8.
    #根据这几行hybrid结果给出mrna片段的长度，和miRNA的起止位置，不包括GU（只有GC完全配对）
    # Note: The returned indices are 1 based and matches are perfect (i.e.
    # no GU wobbles)

    max_align_len = [mrna_mismatch, mrna_match, mirna_mismatch, mirna_match]
    max_align_len = max(map(lambda x: len(x), max_align_len))
    mrna_mismatch += " " * (max_align_len - len(mrna_mismatch))
    mrna_match += " " * (max_align_len - len(mrna_match))
    mirna_mismatch += " " * (max_align_len - len(mirna_mismatch))
    mirna_match += " " * (max_align_len - len(mirna_match))
    #把这4个补到相同的长度（最长）
    mrna_align_len = 0
    for i in range(max_align_len):
        # If both mismatch and match are not gaps then increment
        # the mrna align length.
        if mrna_mismatch[i] == " " and mrna_match[i] == " ":
            continue
        mrna_align_len += 1

    mirna_start = 0
    mirna_start_offset = 0  # accounts for gaps at the beginning of miRNA.
    mirna_end = 0
    # We are looking for a block of matches from the 5' end of the miRNA
    # without any GU wobbles.
    # Ignore GU wobbles at the beginning
    for i in range(1, max_align_len):
        if (mirna_mismatch[-i] == " " and mirna_match[-i] == " "):
            mirna_start_offset += 1
            continue
        break

    for i in range(1 + mirna_start_offset, max_align_len):
        # If we have a Gap or mismatch or a GU wobble then increment the start
        # 如果有mirna开始位置是GU则开始位置向后移动
        if mirna_match[-i] == " " or\
                (mirna_match[-i] == "G" and mrna_match[-i] == "U") or\
                (mirna_match[-i] == "U" and mrna_match[-i] == "G"):
            mirna_start += 1
            continue # G3 add
        # The moment we have a match break.
        if mirna_match[-i] != " ":
            break
    
    mirna_start += 1

    mirna_end = mirna_start
    for i in range(mirna_start + mirna_start_offset, 10 + mirna_start_offset): #G3改
        if mirna_match[-i] == " " or\
                (mirna_match[-i] == "G" and mrna_match[-i] == "U") or\
                (mirna_match[-i] == "U" and mrna_match[-i] == "G"):
            break
        mirna_end += 1

    mirna_end -= 1
    mrna_nospace_g3 = 0
    for i in range(mirna_start+mirna_start_offset+1,max_align_len+1): #G3改
        if mrna_mismatch[-i] != " " or mrna_match[-i] != " ":
            mrna_nospace_g3 += 1
    
    rnapos1 = mrna_nospace_g3 + mirna_start - 1
    # mirna_start mirna_end 都是从1开始数，分别是第1个，最后一个匹配的位置
    #return (mrna_align_len, (mirna_start, mirna_end), rnapos1)
    return ((rnapos1-7,rnapos1-1),mrna_align_len, (mirna_start, mirna_end), rnapos1) # G3 只需返回2-8的位置 1-based


class LocationWithAttribute:
    def __init__(self, loc, site_loc, energy, seed_type, ranpos1, struct_info):
        self._loc = loc
        self._site_loc = site_loc
        self._energy = energy
        self._seed_type = seed_type
        self._ranpos1 = ranpos1
        self._struct_info = struct_info

    def __eq__(self, other):
        return self._loc == other._loc

    def __ne__(self, other):
        return self._loc != other._loc

    def __hash__(self):
        return hash(self._loc) #G3 _loc(start,end) 一样的hash值一样

    def to_str(self):
        seed_type =\
            "None" if self._seed_type is None else ("%d-%d" % self._seed_type)
        return "%d-%d,%d,%d,%.3f,%s,%s,%s" % (
            self._loc[0], self._loc[1],self._site_loc[0],self._site_loc[1], self._energy, seed_type,str(self._ranpos1),self._struct_info
        )

    def __str__(self):
        return self.to_str()

    @staticmethod
    def from_str(str_obj):
        tokens = str_obj.strip().split(",")
        (loc, energy, seed_type) = tokens
        loc = tuple(map(int, loc.split(",")))
        energy = float(energy)
        seed_type =\
            None if seed_type == "None" else tuple(map(int, loc.split(",")))
        return LocationWithAttribute(loc, energy, seed_type)
    def get_loc(self):
        return list(self._loc)
    def is_preferable(self, other):
        # Returns True if self is prefferable over @other LocationWithAttribute
        # object
        # Seed site is preferred over seed-less site
        # A seed-match of greater size is preferred
        # A site with lower energy is preferred.
        
        if self._seed_type is None:
            if other._seed_type is None:
                # Check energy
                if self._energy < other._energy:
                    return True
                else:
                    return False
            else:
                return False
        else:
            if other._seed_type is None:
                return True
            else:
                # Check size of seed match
                if (self._seed_type[1] - self._seed_type[0]) >\
                        (other._seed_type[1] - other._seed_type[0]):
                    return True
                else:
                    return False
        #以下语句从未执行？
        
        if other._seed_type is None and self._seed_type is not None:
            return True
        if other._seed_type is not None and \
                self._seed_type is not None and \
                ((self._loc[1] - self._loc[0]) >
                 (other._loc[1] - other._loc[0])):
            return True
        if self._energy < other._energy:
            return True
        return False

def parse_rna_hybrid_output(outputs, enforce_seed_match=False):
    # Parse output to get the following features:
    #   Mean free energy (mfe) of duplex.
    #   Start and end position of match
    #   GU wobbles are not considered.
    loc_attr_list = []
    outputs = outputs.split('\n')
    for output in outputs:
        output = output.strip()
        output = output.split(":")
        if not output or not output[0]:
            continue
        mfe = float(output[4])
        if not mfe < 0.0:
            continue
        mrna_mismatch, mrna_match, mirna_match, mirna_mismatch =\
            output[7], output[8], output[9], output[10]
        (start_8,end_2), mrna_align_len ,seed_type, rnapos1 = get_match_len_and_type(
            mrna_mismatch, mrna_match, mirna_mismatch, mirna_match
        )
        struct_info = ':'.join([mrna_mismatch, mrna_match,
                                mirna_match, mirna_mismatch])
        start = int(output[6])
        
        
        start_8 = start + start_8
        end_2 =  start + end_2
        #end = start + mrna_align_len # G3 This is neither 0-based(start from 1) nor 1-based,so it's Wrong!!!

        if not enforce_seed_match:
            # We have no seed match constraints
            loc_attr_list.append(
                LocationWithAttribute((start_8, end_2),(start,start+mrna_align_len-1), mfe, None, start+rnapos1, struct_info)
            )
        else:
            #if seed_type[1] - seed_type[0] + 1 >= 6:
            """
                凡是不满足enforce_seed_match的限制的都不要
            """
            if seed_type[0]<=enforce_seed_match[0] and enforce_seed_match[1]<=seed_type[1]:
                loc_attr_list.append(
                    LocationWithAttribute((start_8, end_2),(start,start+mrna_align_len-1), mfe, seed_type,start+rnapos1, struct_info)
                )

    return loc_attr_list

def resolve_ovarlapping_locations(loc_attr_list):
    # Resolved LocationWithAttribute objects
    resolved_loc_attr = {}
    for loc_attr in loc_attr_list:
        if loc_attr in resolved_loc_attr and \
                resolved_loc_attr[loc_attr].is_preferable(loc_attr):
                continue
        resolved_loc_attr[loc_attr] = loc_attr

    return sorted(resolved_loc_attr.values(), key=lambda x: x._loc)

class RNAHybrid:
    def __init__(self):
        self._executable = '/home/hadoop/gthird_party/third_party/RNAhybrid-2.1.1_Ubuntu11.10_64bit/RNAhybrid'

    def __call__(self, mrna_seq, mirna_seq,
                 energy_threshold=None, helix_constraint=None):

        # TODO: Change the dataset type (3utr_human). But do we need to change
        # if we are not interested in the p-value?
        # > 由'\n'分割的结果，每个结果都被:分割成11个字段:
        #command_line,mrna长度,command_line,mirna长度,自由能,'0.368788',起始位置，4行代表结构
        args = "-c -s 3utr_human -m %d" % len(mrna_seq)
        if helix_constraint is not None:
            args += " -f %d,%d" % (helix_constraint[0], helix_constraint[1])
        if energy_threshold is not None:
            args += " -e %0.3f" % energy_threshold

        if os.name == 'nt':
            # We are running on windows, so use files.
            fp = NamedTemporaryFile(mode='w', delete=True)
            fp.write(">mrna\n")
            fp.write("%s\n" % mrna_seq)
            fp.flush()
            cmd = "%s %s -t %s %s" % (self._executable, args,
                                      fp.name, mirna_seq)
            outputs = subprocess.check_output(cmd, shell=True)
            fp.close()
        else:
            cmd = "%s %s %s %s" % (self._executable, args, mrna_seq, mirna_seq)
            outputs = subprocess.check_output(cmd, shell=True)

        return outputs

mrna_seq = 'CGGAGGCGCGGCGCAGGCTGCTGCAGGCCCAGGTGAATGGAGTAACCTGACAGCGGGGACGAGGCGACGGCGAGCGCGAGGAAATGGCGGCGGGGGCGGCGGCGCCGGGCGGCTCCGGGAGGCCTGGGCTGTGACGCGCGCGCCGGAGCGGGGTCCGATGGTTCTCGAAGGCCCGCGGCGCCCCGTGCTGCAGTAAGCTGTGCTAGAACAAAAATGCAATGAAAGAAACACTGGATGAATGAAAAGCCCTGCTTTGCAACCCCTCAGCATGGCAGGCCTGCAGCTCATGACCCCTGCTTCCTCACCAATGGGTCCTTTCTTTGGACTGCCATGGCAACAAGAAGCAATTCATGATAACATTTATACGCCAAGAAAATATCAGGTTGAACTGCTTGAAGCAGCTCTGGATCATAATACCATCGTCTGTTTAAACACTGGCTCAGGGAAGACATTTATTGCAGTACTACTCACTAAAGAGCTGTCCTATCAGATCAGGGGAGACTTCAGCAGAAATGGAAAAAGGACGGTGTTCTTGGTCAACTCTGCAAACCAGGTTGCTCAACAAGTGTCAGCTGTCAGAACTCATTCAGATCTCAAGGTTGGGGAATACTCAAACCTAGAAGTAAATGCATCTTGGACAAAAGAGAGATGGAACCAAGAGTTTACTAAGCACCAGGTTCTCATTATGACTTGCTATGTCGCCTTGAATGTTTTGAAAAATGGTTACTTATCACTGTCAGACATTAACCTTTTGGTGTTTGATGAGTGTCATCTTGCAATCCTAGACCACCCCTATCGAGAAATTATGAAGCTCTGTGAAAATTGTCCATCATGTCCTCGCATTTTGGGACTAACTGCTTCCATTTTAAATGGGAAATGTGATCCAGAGGAATTGGAAGAAAAGATTCAGAAACTAGAGAAAATTCTTAAGAGTAATGCTGAAACTGCAACTGACCTGGTGGTCTTAGACAGGTATACTTCTCAGCCATGTGAGATTGTGGTGGATTGTGGACCATTTACTGACAGAAGTGGGCTTTATGAAAGACTGCTGATGGAATTAGAAGAAGCACTTAATTTTATCAATGATTGTAATATATCTGTACATTCAAAAGAAAGAGATTCTACTTTAATTTCGAAACAGATACTATCAGACTGTCGTGCCGTATTGGTAGTTCTGGGACCCTGGTGTGCAGATAAAGTAGCTGGAATGATGGTAAGAGAACTACAGAAATACATCAAACATGAGCAAGAGGAGCTGCACAGGAAATTTTTATTGTTTACAGACACTTTCCTAAGGAAAATACATGCACTATGTGAAGAGCACTTCTCACCTGCCTCACTTGACCTGAAATTTGTAACTCCTAAAGTAATCAAACTGCTCGAAATCTTACGCAAATATAAACCATATGAGCGACAGCAGTTTGAAAGCGTTGAGTGGTATAATAATAGAAATCAGGATAATTATGTGTCATGGAGTGATTCTGAGGATGATGATGAGGATGAAGAAATTGAAGAAAAAGAGAAGCCAGAGACAAATTTTCCTTCTCCTTTTACCAACATTTTGTGCGGAATTATTTTTGTGGAAAGAAGATACACAGCAGTTGTCTTAAACAGATTGATAAAGGAAGCTGGCAAACAAGATCCAGAGCTGGCTTATATCAGTAGCAATTTCATAACTGGACATGGCATTGGGAAGAATCAGCCTCGCAACAAACAGATGGAAGCAGAATTCAGAAAACAGGAAGAGGTACTTAGGAAATTTCGAGCACATGAGACCAACCTGCTTATTGCAACAAGTATTGTAGAAGAGGGTGTTGATATACCAAAATGCAACTTGGTGGTTCGTTTTGATTTGCCCACAGAATATCGATCCTATGTTCAATCTAAAGGAAGAGCAAGGGCACCCATCTCTAATTATATAATGTTAGCGGATACAGACAAAATAAAAAGTTTTGAAGAAGACCTTAAAACCTACAAAGCTATTGAAAAGATCTTGAGAAACAAGTGTTCCAAGTCGGTTGATACTGGTGAGACTGACATTGATCCTGTCATGGATGATGATGACGTTTTCCCACCATATGTGTTGAGGCCTGACGATGGTGGTCCACGAGTCACAATCAACACGGCCATTGGACACATCAATAGATACTGTGCTAGATTACCAAGTGATCCGTTTACTCATCTAGCTCCTAAATGCAGAACCCGAGAGTTGCCTGATGGTACATTTTATTCAACTCTTTATCTGCCAATTAACTCACCTCTTCGAGCCTCCATTGTTGGTCCACCAATGAGCTGTGTACGATTGGCTGAAAGAGTTGTAGCTCTCATTTGCTGTGAGAAACTGCACAAAATTGGCGAACTGGATGACCATTTGATGCCAGTTGGGAAAGAGACTGTTAAATATGAAGAGGAGCTTGATTTGCATGATGAAGAAGAGACCAGTGTTCCAGGAAGACCAGGTTCCACGAAACGAAGGCAGTGCTACCCAAAAGCAATTCCAGAGTGTTTGAGGGATAGTTATCCCAGACCTGATCAGCCCTGTTACCTGTATGTGATAGGAATGGTTTTAACTACACCTTTACCTGATGAACTCAACTTTAGAAGGCGGAAGCTCTATCCTCCTGAAGATACCACAAGATGCTTTGGAATACTGACGGCCAAACCCATACCTCAGATTCCACACTTTCCTGTGTACACACGCTCTGGAGAGGTTACCATATCCATTGAGTTGAAGAAGTCTGGTTTCATGTTGTCTCTACAAATGCTTGAGTTGATTACAAGACTTCACCAGTATATATTCTCACATATTCTTCGGCTTGAAAAACCTGCACTAGAATTTAAACCTACAGACGCTGATTCAGCATACTGTGTTCTACCTCTTAATGTTGTTAATGACTCCAGCACTTTGGATATTGACTTTAAATTCATGGAAGATATTGAGAAGTCTGAAGCTCGCATAGGCATTCCCAGTACAAAGTATACAAAAGAAACACCCTTTGTTTTTAAATTAGAAGATTACCAAGATGCCGTTATCATTCCAAGATATCGCAATTTTGATCAGCCTCATCGATTTTATGTAGCTGATGTGTACACTGATCTTACCCCACTCAGTAAATTTCCTTCCCCTGAGTATGAAACTTTTGCAGAATATTATAAAACAAAGTACAACCTTGACCTAACCAATCTCAACCAGCCACTGCTGGATGTGGACCACACATCTTCAAGACTTAATCTTTTGACACCTCGACATTTGAATCAGAAGGGGAAAGCGCTTCCTTTAAGCAGTGCTGAGAAGAGGAAAGCCAAATGGGAAAGTCTGCAGAATAAACAGATACTGGTTCCAGAACTCTGTGCTATACATCCAATTCCAGCATCACTGTGGAGAAAAGCTGTTTGTCTCCCCAGCATACTTTATCGCCTTCACTGCCTTTTGACTGCAGAGGAGCTAAGAGCCCAGACTGCCAGCGATGCTGGCGTGGGAGTCAGATCACTTCCTGCGGATTTTAGATACCCTAACTTAGACTTCGGGTGGAAAAAATCTATTGACAGCAAATCTTTCATCTCAATTTCTAACTCCTCTTCAGCTGAAAATGATAATTACTGTAAGCACAGCACAATTGTCCCTGAAAATGCTGCACATCAAGGTGCTAATAGAACCTCCTCTCTAGAAAATCATGACCAAATGTCTGTGAACTGCAGAACGTTGCTCAGCGAGTCCCCTGGTAAGCTCCACGTTGAAGTTTCAGCAGATCTTACAGCAATTAATGGTCTTTCTTACAATCAAAATCTCGCCAATGGCAGTTATGATTTAGCTAACAGAGACTTTTGCCAAGGAAATCAGCTAAATTACTACAAGCAGGAAATACCCGTGCAACCAACTACCTCATATTCCATTCAGAATTTATACAGTTACGAGAACCAGCCCCAGCCCAGCGATGAATGTACTCTCCTGAGTAATAAATACCTTGATGGAAATGCTAACAAATCTACCTCAGATGGAAGTCCTGTGATGGCCGTAATGCCTGGTACGACAGACACTATTCAAGTGCTCAAGGGCAGGATGGATTCTGAGCAGAGCCCTTCTATTGGGTACTCCTCAAGGACTCTTGGCCCCAATCCTGGACTTATTCTTCAGGCTTTGACTCTGTCAAACGCTAGTGATGGATTTAACCTGGAGCGGCTTGAAATGCTTGGCGACTCCTTTTTAAAGCATGCCATCACCACATATCTATTTTGCACTTACCCTGATGCGCATGAGGGCCGCCTTTCATATATGAGAAGCAAAAAGGTCAGCAACTGTAATCTGTATCGCCTTGGAAAAAAGAAGGGACTACCCAGCCGCATGGTGGTGTCAATATTTGATCCCCCTGTGAATTGGCTTCCTCCTGGTTATGTAGTAAATCAAGACAAAAGCAACACAGATAAATGGGAAAAAGATGAAATGACAAAAGACTGCATGCTGGCGAATGGCAAACTGGATGAGGATTACGAGGAGGAGGATGAGGAGGAGGAGAGCCTGATGTGGAGGGCTCCGAAGGAAGAGGCTGACTATGAAGATGATTTCCTGGAGTATGATCAGGAACATATCAGATTTATAGATAATATGTTAATGGGGTCAGGAGCTTTTGTAAAGAAAATCTCTCTTTCTCCTTTTTCAACCACTGATTCTGCATATGAATGGAAAATGCCCAAAAAATCCTCCTTAGGTAGTATGCCATTTTCATCAGATTTTGAGGATTTTGACTACAGCTCTTGGGATGCAATGTGCTATCTGGATCCTAGCAAAGCTGTTGAAGAAGATGACTTTGTGGTGGGGTTCTGGAATCCATCAGAAGAAAACTGTGGTGTTGACACGGGAAAGCAGTCCATTTCTTACGACTTGCACACTGAGCAGTGTATTGCTGACAAAAGCATAGCGGACTGTGTGGAAGCCCTGCTGGGCTGCTATTTAACCAGCTGTGGGGAGAGGGCTGCTCAGCTTTTCCTCTGTTCACTGGGGCTGAAGGTGCTCCCGGTAATTAAAAGGACTGATCGGGAAAAGGCCCTGTGCCCTACTCGGGAGAATTTCAACAGCCAACAAAAGAACCTTTCAGTGAGCTGTGCTGCTGCTTCTGTGGCCAGTTCACGCTCTTCTGTATTGAAAGACTCGGAATATGGTTGTTTGAAGATTCCACCAAGATGTATGTTTGATCATCCAGATGCAGATAAAACACTGAATCACCTTATATCGGGGTTTGAAAATTTTGAAAAGAAAATCAACTACAGATTCAAGAATAAGGCTTACCTTCTCCAGGCTTTTACACATGCCTCCTACCACTACAATACTATCACTGATTGTTACCAGCGCTTAGAATTCCTGGGAGATGCGATTTTGGACTACCTCATAACCAAGCACCTTTATGAAGACCCGCGGCAGCACTCCCCGGGGGTCCTGACAGACCTGCGGTCTGCCCTGGTCAACAACACCATCTTTGCATCGCTGGCTGTAAAGTACGACTACCACAAGTACTTCAAAGCTGTCTCTCCTGAGCTCTTCCATGTCATTGATGACTTTGTGCAGTTTCAGCTTGAGAAGAATGAAATGCAAGGAATGGATTCTGAGCTTAGGAGATCTGAGGAGGATGAAGAGAAAGAAGAGGATATTGAAGTTCCAAAGGCCATGGGGGATATTTTTGAGTCGCTTGCTGGTGCCATTTACATGGATAGTGGGATGTCACTGGAGACAGTCTGGCAGGTGTACTATCCCATGATGCGGCCACTAATAGAAAAGTTTTCTGCAAATGTACCCCGTTCCCCTGTGCGAGAATTGCTTGAAATGGAACCAGAAACTGCCAAATTTAGCCCGGCTGAGAGAACTTACGACGGGAAGGTCAGAGTCACTGTGGAAGTAGTAGGAAAGGGGAAATTTAAAGGTGTTGGTCGAAGTTACAGGATTGCCAAATCTGCAGCAGCAAGAAGAGCCCTCCGAAGCCTCAAAGCTAATCAACCTCAGGTTCCCAATAGCTGAAACCGCTTTTTAAAATTCAAAACAAGAAACAAAACAAAAAAAATTAAGGGGAAAATTATTTAAATCGGAAAGGAAGACTTAAAGTTGTTAGTGAGTGGAATGAATTGAAGGCAGAATTTAAAGTTTGGTTGATAACAGGATAGATAACAGAATAAAACATTTAACATATGTATAAAATTTTGGAACTAATTGTAGTTTTAGTTTTTTGCGCAAACACAATCTTATCTTCTTTCCTCACTTCTGCTTTGTTTAAATCACAAGAGTGCTTTAATGATGACATTTAGCAAGTGCTCAAAATAATTGACAGGTTTTGTTTTTTTTTTTTTGAGTTTATGTCAGCTTTGCTTAGTGTTAGAAGGCCATGGAGCTTAAACCTCCAGCAGTCCCTAGGATGATGTAGATTCTTCTCCATCTCTCCGTGTGTGCAGTAGTGCCAGTCCTGCAGTAGTTGATAAGCTGAATAGAAAGATAAGGTTTTCGAGAGGAGAAGTGCGCCAATGTTGTCTTTTCTTTCCACGTTATACTGTGTAAGGTGATGTTCCCGGTCGCTGTTGCACCTGATAGTAAGGGACAGATTTTTAATGAACATTGGCTGGCATGTTGGTGAATCACATTTTAGTTTTCTGATGCCACATAGTCTTGCATAAAAAAGGGTTCTTGCCTTAAAAGTGAAACCTTCATGGATAGTCTTTAATCTCTGATCTTTTTGGAACAAACTGTTTTACATTCCTTTCATTTTATTATGCATTAGACGTTGAGACAGCGTGATACTTACAACTCACTAGTATAGTTGTAACTTATTACAGGATCATACTAAAATTTCTGTCATATGTATACTGAAGACATTTTAAAAACCAGAATATGTAGTCTACGGATATTTTTTATCATAAAAATGATCTTTGGCTAAACACCCCATTTTACTAAAGTCCTCCTGCCAGGTAGTTCCCACTGATGGAAATGTTTATGGCAAATAATTTTGCCTTCTAGGCTGTTGCTCTAACAAAATAAACCTTAGACATATCACACCTAAAATATGCTGCAGATTTTATAATTGATTGGTTACTTATTTAAGAAGCAAAACACAGCACCTTTACCCTTAGTCTCCTCACATAAATTTCTTACTATACTTTTCATAATGTTGCATGCATATTTCACCTACCAAAGCTGTGCTGTTAATGCCGTGAAAGTTTAACGTTTGCGATAAACTGCCGTAATTTTGATACATCTGTGATTTAGGTCATTAATTTAGATAAACTAGCTCATTATTTCCATCTTTGGAAAAGGAAAAAAAAAAAAACTTCTTTAGGCATTTGCCTAAGTTTCTTTAATTAGACTTGTAGGCACTCTTCACTTAAATACCTCAGTTCTTCTTTTCTTTTGCATGCATTTTTCCCCTGTTTGGTGCTATGTTTATGTATTATGCTTGAAATTTTAATTTTTTTTTTTTTGCACTGTAACTATAATACCTCTTAATTTACCTTTTTAAAAGCTGTGGGTCAGTCTTGCACTCCCATCAACATACCAGTAGAGGTTTGCTGCAATTTGCCCCGTTAATTATGCTTGAAGTTTAAGAAAGCTGAGCAGAGGTGTCTCATATTTCCCAGCACATGATTCTGAACTTGATGCTTCGTGGAATGCTGCATTTATATGTAAGTGACATTTGAATACTGTCCTTCCTGCTTTATCTGCATCATCCACCCACAGAGAAATGCCTCTGTGCGAGTGCACCGACAGAAAACTGTCAGCTCTGCTTTCTAAGGAACCCTGAGTGAGGGGGGTATTAAGCTTCTCCAGTGTTTTTTGTTGTCTCCAATCTTAAACTTAAATTGAGATCTAAATTATTAAACGAGTTTTTGAGCAAATTAGGTGACTTGTTTTAAAAATATTTAATTCCGATTTGGAACCTTAGATGTCTATTTGATTTTTTAAAAAACCTTAATGTAAGATATGACCAGTTAAAACAAAGCAATTCTTGAATTATATAACTGTAAAAGTGTGCAGTTAACAAGGCTGGATGTGAATTTTATTCTGAGGGTGATTTGTGATCAAGTTTAATCACAAATCTCTTAATATTTATAAACTACCTGATGCCAGGAGCTTAGGGCTTTGCATTGTGTCTAATACATTGATCCCAGTGTTACGGGATTCTCTTGATTCCTGGCACCAAAATCAGATTGTTTTCACAGTTATGATTCCCAGTGGGAGAAAAATGCCTCAATATATTTGTAACCTTAAGAAGAGTATTTTTTTGTTAATACTAAGATGTTCAAACTTAGACATGATTAGGTCATACATTCTCAGGGGTTCAAATTTCCTTCTACCATTCAAATGTTTTATCAACAGCAAACTTCAGCCGTTTCACTTTTTGTTGGAGAAAAATAGTAGATTTTAATTTGACTCACAGTTTGAAGCATTCTGTGATCCCCTGGTTACTGAGTTAAAAAATAAAAAAGTACGAGTTAGACATATGAAATGGTTATGAACGCTTTTGTGCTGCTGATTTTTAATGCTGTAAAGTTTTCCTGTGTTTAGCTTGTTGAAATGTTTTGCATCTGTCAATTAAGGAAAAAAAAAATCACTCTATGTTGCCCCACTTTAGAGCCCTGTGTGCCACCCTGTGTTCCTGTGATTGCAATGTGAGACCGAATGTAATATGGAAAACCTACCAGTGGGGTGTGGTTGTGCCCTGAGCACGTGTGTAAAGGACTGGGGAGGCGTGTCTTGAAAAAGCAACTGCAGAAATTCCTTATGATGATTGTGTGCAAGTTAGTTAACATGAACCTTCATTTGTAAATTTTTTAAAATTTCTTTTATAATATGCTTTCCGCAGTCCTAACTATGCTGCGTTTTATAATAGCTTTTTCCCTTCTGTTCTGTTCATGTAGCACAGATAAGCATTGCACTTGGTACCATGCTTTACCTCATTTCAAGAAAATATGCTTAACAGAGAGGAAAAAAATGTGGTTTGGCCTTGCTGCTGTTTTGATTTATGGAATTTGAAAAAGATAATTATAATGCCTGCAATGTGTCATATACTCGCACAACTTAAATAGGTCATTTTTGTCTGTGGCATTTTTACTGTTTGTGAAAGTATGAAACAGATTTGTTAACTGAACTCTTAATTATGTTTTTAAAATGTTTGTTATATTTCTTTTCTTTTTTCTTTTATATTACGTGAAGTGATGAAATTTAGAATGACCTCTAACACTCCTGTAATTGTCTTTTAAAATACTGATATTTTTATTTGTTAATAATACTTTGCCCTCAGAAAGATTCTGATACCCTGCCTTGACAACATGAAACTTGAGGCTGCTTTGGTTCATGAATCCAGGTGTTCCCCCGGCAGTCGGCTTCTTCAGTCGCTCCCTGGAGGCAGGTGGGCACTGCAGAGGATCACTGGAATCCAGATCGAGCGCAGTTCATGCACAAGGCCCCGTTGATTTAAAATATTGGATCTTGCTCTGTTAGGGTGTCTAATCCCTTTACACAAGATTGAAGCCACCAAACTGAGACCTTGATACCTTTTTTTAACTGCATCTGAAATTATGTTAAGAGTCTTTAACCCATTTGCATTATCTGCAGAAGAGAAACTCATGTCATGTTTATTACCTATATGGTTGTTTTAATTACATTTGAATAATTATATTTTTCCAACCACTGATTACTTTTCAGGAATTTAATTATTTCCAGATAAATTTCTTTATTTTATATTGTACATGAAAAGTTTTAAAGATATGTTTAAGACCAAGACTATTAAAATGATTTTTAAAGTTGTTGGAGACGCCAATAGCAATATCTAGGAAATTTGCATTGAGACCATTGTATTTTCCACTAGCAGTGAAAATGATTTTTCACAACTAACTTGTAAATATATTTTAATCATTACTTCTTTTTTTCTAGTCCATTTTTATTTGGACATCAACCACAGACAATTTAAATTTTATAGATGCACTAAGAATTCACTGCAGCAGCAGGTTACATAGCAAAAATGCAAAGGTGAACAGGAAGTAAATTTCTGGCTTTTCTGCTGTAAATAGTGAAGGAAAATTACTAAAATCAAGTAAAACTAATGCATATTATTTGATTGACAATAAAATATTTACCATCACATGCTGCAGCTGTTTTTTAAGGAACATGATGTCATTCATTCATACAGTAATCATGCTGCAGAAATTTGCAGTCTGCACCTTATGGATCACAATTACCTTTAGTTGTTTTTTTTGTAATAATTGTAGCCAAGTAAATCTCCAATAAAGTTATCGTCTGTTCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
mirna_seq = 'TGAGGTAGTAGGTTGTATAGTT'
if __name__ == '__main__':
    mrna_seq = 'CGGAGGCGCGGCGCAGGCTGCTGCAGGCCCAGGTGAATGGAGTAACCTGACAGCGGGGACGAGGCGACGGCGAGCGCGAGGAAATGGCGGCGGGGGCGGCGGCGCCGGGCGGCTCCGGGAGGCCTGGGCTGTGACGCGCGCGCCGGAGCGGGGTCCGATGGTTCTCGAAGGCCCGCGGCGCCCCGTGCTGCAGTAAGCTGTGCTAGAACAAAAATGCAATGAAAGAAACACTGGATGAATGAAAAGCCCTGCTTTGCAACCCCTCAGCATGGCAGGCCTGCAGCTCATGACCCCTGCTTCCTCACCAATGGGTCCTTTCTTTGGACTGCCATGGCAACAAGAAGCAATTCATGATAACATTTATACGCCAAGAAAATATCAGGTTGAACTGCTTGAAGCAGCTCTGGATCATAATACCATCGTCTGTTTAAACACTGGCTCAGGGAAGACATTTATTGCAGTACTACTCACTAAAGAGCTGTCCTATCAGATCAGGGGAGACTTCAGCAGAAATGGAAAAAGGACGGTGTTCTTGGTCAACTCTGCAAACCAGGTTGCTCAACAAGTGTCAGCTGTCAGAACTCATTCAGATCTCAAGGTTGGGGAATACTCAAACCTAGAAGTAAATGCATCTTGGACAAAAGAGAGATGGAACCAAGAGTTTACTAAGCACCAGGTTCTCATTATGACTTGCTATGTCGCCTTGAATGTTTTGAAAAATGGTTACTTATCACTGTCAGACATTAACCTTTTGGTGTTTGATGAGTGTCATCTTGCAATCCTAGACCACCCCTATCGAGAAATTATGAAGCTCTGTGAAAATTGTCCATCATGTCCTCGCATTTTGGGACTAACTGCTTCCATTTTAAATGGGAAATGTGATCCAGAGGAATTGGAAGAAAAGATTCAGAAACTAGAGAAAATTCTTAAGAGTAATGCTGAAACTGCAACTGACCTGGTGGTCTTAGACAGGTATACTTCTCAGCCATGTGAGATTGTGGTGGATTGTGGACCATTTACTGACAGAAGTGGGCTTTATGAAAGACTGCTGATGGAATTAGAAGAAGCACTTAATTTTATCAATGATTGTAATATATCTGTACATTCAAAAGAAAGAGATTCTACTTTAATTTCGAAACAGATACTATCAGACTGTCGTGCCGTATTGGTAGTTCTGGGACCCTGGTGTGCAGATAAAGTAGCTGGAATGATGGTAAGAGAACTACAGAAATACATCAAACATGAGCAAGAGGAGCTGCACAGGAAATTTTTATTGTTTACAGACACTTTCCTAAGGAAAATACATGCACTATGTGAAGAGCACTTCTCACCTGCCTCACTTGACCTGAAATTTGTAACTCCTAAAGTAATCAAACTGCTCGAAATCTTACGCAAATATAAACCATATGAGCGACAGCAGTTTGAAAGCGTTGAGTGGTATAATAATAGAAATCAGGATAATTATGTGTCATGGAGTGATTCTGAGGATGATGATGAGGATGAAGAAATTGAAGAAAAAGAGAAGCCAGAGACAAATTTTCCTTCTCCTTTTACCAACATTTTGTGCGGAATTATTTTTGTGGAAAGAAGATACACAGCAGTTGTCTTAAACAGATTGATAAAGGAAGCTGGCAAACAAGATCCAGAGCTGGCTTATATCAGTAGCAATTTCATAACTGGACATGGCATTGGGAAGAATCAGCCTCGCAACAAACAGATGGAAGCAGAATTCAGAAAACAGGAAGAGGTACTTAGGAAATTTCGAGCACATGAGACCAACCTGCTTATTGCAACAAGTATTGTAGAAGAGGGTGTTGATATACCAAAATGCAACTTGGTGGTTCGTTTTGATTTGCCCACAGAATATCGATCCTATGTTCAATCTAAAGGAAGAGCAAGGGCACCCATCTCTAATTATATAATGTTAGCGGATACAGACAAAATAAAAAGTTTTGAAGAAGACCTTAAAACCTACAAAGCTATTGAAAAGATCTTGAGAAACAAGTGTTCCAAGTCGGTTGATACTGGTGAGACTGACATTGATCCTGTCATGGATGATGATGACGTTTTCCCACCATATGTGTTGAGGCCTGACGATGGTGGTCCACGAGTCACAATCAACACGGCCATTGGACACATCAATAGATACTGTGCTAGATTACCAAGTGATCCGTTTACTCATCTAGCTCCTAAATGCAGAACCCGAGAGTTGCCTGATGGTACATTTTATTCAACTCTTTATCTGCCAATTAACTCACCTCTTCGAGCCTCCATTGTTGGTCCACCAATGAGCTGTGTACGATTGGCTGAAAGAGTTGTAGCTCTCATTTGCTGTGAGAAACTGCACAAAATTGGCGAACTGGATGACCATTTGATGCCAGTTGGGAAAGAGACTGTTAAATATGAAGAGGAGCTTGATTTGCATGATGAAGAAGAGACCAGTGTTCCAGGAAGACCAGGTTCCACGAAACGAAGGCAGTGCTACCCAAAAGCAATTCCAGAGTGTTTGAGGGATAGTTATCCCAGACCTGATCAGCCCTGTTACCTGTATGTGATAGGAATGGTTTTAACTACACCTTTACCTGATGAACTCAACTTTAGAAGGCGGAAGCTCTATCCTCCTGAAGATACCACAAGATGCTTTGGAATACTGACGGCCAAACCCATACCTCAGATTCCACACTTTCCTGTGTACACACGCTCTGGAGAGGTTACCATATCCATTGAGTTGAAGAAGTCTGGTTTCATGTTGTCTCTACAAATGCTTGAGTTGATTACAAGACTTCACCAGTATATATTCTCACATATTCTTCGGCTTGAAAAACCTGCACTAGAATTTAAACCTACAGACGCTGATTCAGCATACTGTGTTCTACCTCTTAATGTTGTTAATGACTCCAGCACTTTGGATATTGACTTTAAATTCATGGAAGATATTGAGAAGTCTGAAGCTCGCATAGGCATTCCCAGTACAAAGTATACAAAAGAAACACCCTTTGTTTTTAAATTAGAAGATTACCAAGATGCCGTTATCATTCCAAGATATCGCAATTTTGATCAGCCTCATCGATTTTATGTAGCTGATGTGTACACTGATCTTACCCCACTCAGTAAATTTCCTTCCCCTGAGTATGAAACTTTTGCAGAATATTATAAAACAAAGTACAACCTTGACCTAACCAATCTCAACCAGCCACTGCTGGATGTGGACCACACATCTTCAAGACTTAATCTTTTGACACCTCGACATTTGAATCAGAAGGGGAAAGCGCTTCCTTTAAGCAGTGCTGAGAAGAGGAAAGCCAAATGGGAAAGTCTGCAGAATAAACAGATACTGGTTCCAGAACTCTGTGCTATACATCCAATTCCAGCATCACTGTGGAGAAAAGCTGTTTGTCTCCCCAGCATACTTTATCGCCTTCACTGCCTTTTGACTGCAGAGGAGCTAAGAGCCCAGACTGCCAGCGATGCTGGCGTGGGAGTCAGATCACTTCCTGCGGATTTTAGATACCCTAACTTAGACTTCGGGTGGAAAAAATCTATTGACAGCAAATCTTTCATCTCAATTTCTAACTCCTCTTCAGCTGAAAATGATAATTACTGTAAGCACAGCACAATTGTCCCTGAAAATGCTGCACATCAAGGTGCTAATAGAACCTCCTCTCTAGAAAATCATGACCAAATGTCTGTGAACTGCAGAACGTTGCTCAGCGAGTCCCCTGGTAAGCTCCACGTTGAAGTTTCAGCAGATCTTACAGCAATTAATGGTCTTTCTTACAATCAAAATCTCGCCAATGGCAGTTATGATTTAGCTAACAGAGACTTTTGCCAAGGAAATCAGCTAAATTACTACAAGCAGGAAATACCCGTGCAACCAACTACCTCATATTCCATTCAGAATTTATACAGTTACGAGAACCAGCCCCAGCCCAGCGATGAATGTACTCTCCTGAGTAATAAATACCTTGATGGAAATGCTAACAAATCTACCTCAGATGGAAGTCCTGTGATGGCCGTAATGCCTGGTACGACAGACACTATTCAAGTGCTCAAGGGCAGGATGGATTCTGAGCAGAGCCCTTCTATTGGGTACTCCTCAAGGACTCTTGGCCCCAATCCTGGACTTATTCTTCAGGCTTTGACTCTGTCAAACGCTAGTGATGGATTTAACCTGGAGCGGCTTGAAATGCTTGGCGACTCCTTTTTAAAGCATGCCATCACCACATATCTATTTTGCACTTACCCTGATGCGCATGAGGGCCGCCTTTCATATATGAGAAGCAAAAAGGTCAGCAACTGTAATCTGTATCGCCTTGGAAAAAAGAAGGGACTACCCAGCCGCATGGTGGTGTCAATATTTGATCCCCCTGTGAATTGGCTTCCTCCTGGTTATGTAGTAAATCAAGACAAAAGCAACACAGATAAATGGGAAAAAGATGAAATGACAAAAGACTGCATGCTGGCGAATGGCAAACTGGATGAGGATTACGAGGAGGAGGATGAGGAGGAGGAGAGCCTGATGTGGAGGGCTCCGAAGGAAGAGGCTGACTATGAAGATGATTTCCTGGAGTATGATCAGGAACATATCAGATTTATAGATAATATGTTAATGGGGTCAGGAGCTTTTGTAAAGAAAATCTCTCTTTCTCCTTTTTCAACCACTGATTCTGCATATGAATGGAAAATGCCCAAAAAATCCTCCTTAGGTAGTATGCCATTTTCATCAGATTTTGAGGATTTTGACTACAGCTCTTGGGATGCAATGTGCTATCTGGATCCTAGCAAAGCTGTTGAAGAAGATGACTTTGTGGTGGGGTTCTGGAATCCATCAGAAGAAAACTGTGGTGTTGACACGGGAAAGCAGTCCATTTCTTACGACTTGCACACTGAGCAGTGTATTGCTGACAAAAGCATAGCGGACTGTGTGGAAGCCCTGCTGGGCTGCTATTTAACCAGCTGTGGGGAGAGGGCTGCTCAGCTTTTCCTCTGTTCACTGGGGCTGAAGGTGCTCCCGGTAATTAAAAGGACTGATCGGGAAAAGGCCCTGTGCCCTACTCGGGAGAATTTCAACAGCCAACAAAAGAACCTTTCAGTGAGCTGTGCTGCTGCTTCTGTGGCCAGTTCACGCTCTTCTGTATTGAAAGACTCGGAATATGGTTGTTTGAAGATTCCACCAAGATGTATGTTTGATCATCCAGATGCAGATAAAACACTGAATCACCTTATATCGGGGTTTGAAAATTTTGAAAAGAAAATCAACTACAGATTCAAGAATAAGGCTTACCTTCTCCAGGCTTTTACACATGCCTCCTACCACTACAATACTATCACTGATTGTTACCAGCGCTTAGAATTCCTGGGAGATGCGATTTTGGACTACCTCATAACCAAGCACCTTTATGAAGACCCGCGGCAGCACTCCCCGGGGGTCCTGACAGACCTGCGGTCTGCCCTGGTCAACAACACCATCTTTGCATCGCTGGCTGTAAAGTACGACTACCACAAGTACTTCAAAGCTGTCTCTCCTGAGCTCTTCCATGTCATTGATGACTTTGTGCAGTTTCAGCTTGAGAAGAATGAAATGCAAGGAATGGATTCTGAGCTTAGGAGATCTGAGGAGGATGAAGAGAAAGAAGAGGATATTGAAGTTCCAAAGGCCATGGGGGATATTTTTGAGTCGCTTGCTGGTGCCATTTACATGGATAGTGGGATGTCACTGGAGACAGTCTGGCAGGTGTACTATCCCATGATGCGGCCACTAATAGAAAAGTTTTCTGCAAATGTACCCCGTTCCCCTGTGCGAGAATTGCTTGAAATGGAACCAGAAACTGCCAAATTTAGCCCGGCTGAGAGAACTTACGACGGGAAGGTCAGAGTCACTGTGGAAGTAGTAGGAAAGGGGAAATTTAAAGGTGTTGGTCGAAGTTACAGGATTGCCAAATCTGCAGCAGCAAGAAGAGCCCTCCGAAGCCTCAAAGCTAATCAACCTCAGGTTCCCAATAGCTGAAACCGCTTTTTAAAATTCAAAACAAGAAACAAAACAAAAAAAATTAAGGGGAAAATTATTTAAATCGGAAAGGAAGACTTAAAGTTGTTAGTGAGTGGAATGAATTGAAGGCAGAATTTAAAGTTTGGTTGATAACAGGATAGATAACAGAATAAAACATTTAACATATGTATAAAATTTTGGAACTAATTGTAGTTTTAGTTTTTTGCGCAAACACAATCTTATCTTCTTTCCTCACTTCTGCTTTGTTTAAATCACAAGAGTGCTTTAATGATGACATTTAGCAAGTGCTCAAAATAATTGACAGGTTTTGTTTTTTTTTTTTTGAGTTTATGTCAGCTTTGCTTAGTGTTAGAAGGCCATGGAGCTTAAACCTCCAGCAGTCCCTAGGATGATGTAGATTCTTCTCCATCTCTCCGTGTGTGCAGTAGTGCCAGTCCTGCAGTAGTTGATAAGCTGAATAGAAAGATAAGGTTTTCGAGAGGAGAAGTGCGCCAATGTTGTCTTTTCTTTCCACGTTATACTGTGTAAGGTGATGTTCCCGGTCGCTGTTGCACCTGATAGTAAGGGACAGATTTTTAATGAACATTGGCTGGCATGTTGGTGAATCACATTTTAGTTTTCTGATGCCACATAGTCTTGCATAAAAAAGGGTTCTTGCCTTAAAAGTGAAACCTTCATGGATAGTCTTTAATCTCTGATCTTTTTGGAACAAACTGTTTTACATTCCTTTCATTTTATTATGCATTAGACGTTGAGACAGCGTGATACTTACAACTCACTAGTATAGTTGTAACTTATTACAGGATCATACTAAAATTTCTGTCATATGTATACTGAAGACATTTTAAAAACCAGAATATGTAGTCTACGGATATTTTTTATCATAAAAATGATCTTTGGCTAAACACCCCATTTTACTAAAGTCCTCCTGCCAGGTAGTTCCCACTGATGGAAATGTTTATGGCAAATAATTTTGCCTTCTAGGCTGTTGCTCTAACAAAATAAACCTTAGACATATCACACCTAAAATATGCTGCAGATTTTATAATTGATTGGTTACTTATTTAAGAAGCAAAACACAGCACCTTTACCCTTAGTCTCCTCACATAAATTTCTTACTATACTTTTCATAATGTTGCATGCATATTTCACCTACCAAAGCTGTGCTGTTAATGCCGTGAAAGTTTAACGTTTGCGATAAACTGCCGTAATTTTGATACATCTGTGATTTAGGTCATTAATTTAGATAAACTAGCTCATTATTTCCATCTTTGGAAAAGGAAAAAAAAAAAAACTTCTTTAGGCATTTGCCTAAGTTTCTTTAATTAGACTTGTAGGCACTCTTCACTTAAATACCTCAGTTCTTCTTTTCTTTTGCATGCATTTTTCCCCTGTTTGGTGCTATGTTTATGTATTATGCTTGAAATTTTAATTTTTTTTTTTTTGCACTGTAACTATAATACCTCTTAATTTACCTTTTTAAAAGCTGTGGGTCAGTCTTGCACTCCCATCAACATACCAGTAGAGGTTTGCTGCAATTTGCCCCGTTAATTATGCTTGAAGTTTAAGAAAGCTGAGCAGAGGTGTCTCATATTTCCCAGCACATGATTCTGAACTTGATGCTTCGTGGAATGCTGCATTTATATGTAAGTGACATTTGAATACTGTCCTTCCTGCTTTATCTGCATCATCCACCCACAGAGAAATGCCTCTGTGCGAGTGCACCGACAGAAAACTGTCAGCTCTGCTTTCTAAGGAACCCTGAGTGAGGGGGGTATTAAGCTTCTCCAGTGTTTTTTGTTGTCTCCAATCTTAAACTTAAATTGAGATCTAAATTATTAAACGAGTTTTTGAGCAAATTAGGTGACTTGTTTTAAAAATATTTAATTCCGATTTGGAACCTTAGATGTCTATTTGATTTTTTAAAAAACCTTAATGTAAGATATGACCAGTTAAAACAAAGCAATTCTTGAATTATATAACTGTAAAAGTGTGCAGTTAACAAGGCTGGATGTGAATTTTATTCTGAGGGTGATTTGTGATCAAGTTTAATCACAAATCTCTTAATATTTATAAACTACCTGATGCCAGGAGCTTAGGGCTTTGCATTGTGTCTAATACATTGATCCCAGTGTTACGGGATTCTCTTGATTCCTGGCACCAAAATCAGATTGTTTTCACAGTTATGATTCCCAGTGGGAGAAAAATGCCTCAATATATTTGTAACCTTAAGAAGAGTATTTTTTTGTTAATACTAAGATGTTCAAACTTAGACATGATTAGGTCATACATTCTCAGGGGTTCAAATTTCCTTCTACCATTCAAATGTTTTATCAACAGCAAACTTCAGCCGTTTCACTTTTTGTTGGAGAAAAATAGTAGATTTTAATTTGACTCACAGTTTGAAGCATTCTGTGATCCCCTGGTTACTGAGTTAAAAAATAAAAAAGTACGAGTTAGACATATGAAATGGTTATGAACGCTTTTGTGCTGCTGATTTTTAATGCTGTAAAGTTTTCCTGTGTTTAGCTTGTTGAAATGTTTTGCATCTGTCAATTAAGGAAAAAAAAAATCACTCTATGTTGCCCCACTTTAGAGCCCTGTGTGCCACCCTGTGTTCCTGTGATTGCAATGTGAGACCGAATGTAATATGGAAAACCTACCAGTGGGGTGTGGTTGTGCCCTGAGCACGTGTGTAAAGGACTGGGGAGGCGTGTCTTGAAAAAGCAACTGCAGAAATTCCTTATGATGATTGTGTGCAAGTTAGTTAACATGAACCTTCATTTGTAAATTTTTTAAAATTTCTTTTATAATATGCTTTCCGCAGTCCTAACTATGCTGCGTTTTATAATAGCTTTTTCCCTTCTGTTCTGTTCATGTAGCACAGATAAGCATTGCACTTGGTACCATGCTTTACCTCATTTCAAGAAAATATGCTTAACAGAGAGGAAAAAAATGTGGTTTGGCCTTGCTGCTGTTTTGATTTATGGAATTTGAAAAAGATAATTATAATGCCTGCAATGTGTCATATACTCGCACAACTTAAATAGGTCATTTTTGTCTGTGGCATTTTTACTGTTTGTGAAAGTATGAAACAGATTTGTTAACTGAACTCTTAATTATGTTTTTAAAATGTTTGTTATATTTCTTTTCTTTTTTCTTTTATATTACGTGAAGTGATGAAATTTAGAATGACCTCTAACACTCCTGTAATTGTCTTTTAAAATACTGATATTTTTATTTGTTAATAATACTTTGCCCTCAGAAAGATTCTGATACCCTGCCTTGACAACATGAAACTTGAGGCTGCTTTGGTTCATGAATCCAGGTGTTCCCCCGGCAGTCGGCTTCTTCAGTCGCTCCCTGGAGGCAGGTGGGCACTGCAGAGGATCACTGGAATCCAGATCGAGCGCAGTTCATGCACAAGGCCCCGTTGATTTAAAATATTGGATCTTGCTCTGTTAGGGTGTCTAATCCCTTTACACAAGATTGAAGCCACCAAACTGAGACCTTGATACCTTTTTTTAACTGCATCTGAAATTATGTTAAGAGTCTTTAACCCATTTGCATTATCTGCAGAAGAGAAACTCATGTCATGTTTATTACCTATATGGTTGTTTTAATTACATTTGAATAATTATATTTTTCCAACCACTGATTACTTTTCAGGAATTTAATTATTTCCAGATAAATTTCTTTATTTTATATTGTACATGAAAAGTTTTAAAGATATGTTTAAGACCAAGACTATTAAAATGATTTTTAAAGTTGTTGGAGACGCCAATAGCAATATCTAGGAAATTTGCATTGAGACCATTGTATTTTCCACTAGCAGTGAAAATGATTTTTCACAACTAACTTGTAAATATATTTTAATCATTACTTCTTTTTTTCTAGTCCATTTTTATTTGGACATCAACCACAGACAATTTAAATTTTATAGATGCACTAAGAATTCACTGCAGCAGCAGGTTACATAGCAAAAATGCAAAGGTGAACAGGAAGTAAATTTCTGGCTTTTCTGCTGTAAATAGTGAAGGAAAATTACTAAAATCAAGTAAAACTAATGCATATTATTTGATTGACAATAAAATATTTACCATCACATGCTGCAGCTGTTTTTTAAGGAACATGATGTCATTCATTCATACAGTAATCATGCTGCAGAAATTTGCAGTCTGCACCTTATGGATCACAATTACCTTTAGTTGTTTTTTTTGTAATAATTGTAGCCAAGTAAATCTCCAATAAAGTTATCGTCTGTTCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
    mirna_seq = 'TGAGGTAGTAGGTTGTATAGTT'
    rh = RNAHybrid()    
    res = get_labeled_target_locations(rh,mirna_seq,mrna_seq,[[3856,3928]])
#    output = rh(mrna_seq,mirna_seq)
#    parsed_out = parse_rna_hybrid_output(output) 
    '''
    RNAHybrid的输出：
    'mrna:2482:command_line:22:-34.0:0.029548:1822: U       GA             A:  UUAUACA  ACCUACUGCCUCA :  GAUAUGU  UGGAUGAUGGAGU :UU                       \n'
    mrna:2482:
    command_line:22:
    -34.0:0.029548:
    1822: 结构起始位置：从1开始数
    U       GA             A:
      UUAUACA  ACCUACUGCCUCA :mrna 5'-3'
      GAUAUGU  UGGAUGAUGGAGU :mirna 3'-5'
    UU                  
    '''
